import java.io.*;
import java.util.*;


// First we check if the resulted build.log output exists.
File file = new File( basedir, "build.log" );
if ( !file.exists() )
{
    throw new FileNotFoundException( "Could not find the build.log file.: " + file );
}

String[] checkedLines = {
	"[INFO] --- maven-license-verifier:",
    "[INFO]    ]VALID[   (compile) The artifact com.google.code.google-collections:google-collect:jar:snapshot-20080530 has a license which is categorized as valid",
    "[INFO]    ]VALID[   (compile) The artifact commons-logging:commons-logging-api:jar:1.1 has a license which is categorized as valid",
    "[WARNING] ]UNKNOWN[ (compile) The artifact log4j:log4j:jar:1.2.12 has a license which is categorized as unknown",
    "[INFO]    ]VALID[   (compile) The artifact org.apache.maven.shared:maven-dependency-tree:jar:1.2 has a license which is categorized as valid",
    "[INFO]    ]VALID[   (compile) The artifact org.apache.maven.wagon:wagon-provider-api:jar:1.0-beta-2 has a license which is categorized as valid",
    "[INFO]    ]VALID[   (compile) The artifact org.apache.maven:maven-artifact-manager:jar:2.0.8 has a license which is categorized as valid",
    "[INFO]    ]VALID[   (compile) The artifact org.apache.maven:maven-artifact:jar:3.0-alpha-5 has a license which is categorized as valid",
    "[INFO]    ]VALID[   (compile) The artifact org.apache.maven:maven-core:jar:3.0-alpha-5 has a license which is categorized as valid",
    "[INFO]    ]VALID[   (compile) The artifact org.apache.maven:maven-model-builder:jar:3.0-alpha-5 has a license which is categorized as valid",
    "[INFO]    ]VALID[   (compile) The artifact org.apache.maven:maven-model:jar:3.0-alpha-5 has a license which is categorized as valid",
    "[INFO]    ]VALID[   (compile) The artifact org.apache.maven:maven-plugin-api:jar:3.0-alpha-5 has a license which is categorized as valid",
    "[INFO]    ]VALID[   (compile) The artifact org.apache.maven:maven-plugin-registry:jar:2.0.8 has a license which is categorized as valid",
    "[INFO]    ]VALID[   (compile) The artifact org.apache.maven:maven-profile:jar:2.0.8 has a license which is categorized as valid",
    "[INFO]    ]VALID[   (compile) The artifact org.apache.maven:maven-project:jar:2.0.8 has a license which is categorized as valid",
    "[INFO]    ]VALID[   (compile) The artifact org.apache.maven:maven-repository-metadata:jar:2.0.8 has a license which is categorized as valid",
    "[INFO]    ]VALID[   (compile) The artifact org.apache.maven:maven-settings:jar:3.0-alpha-5 has a license which is categorized as valid",
    "[INFO]    ]VALID[   (compile) The artifact org.apache.xbean:xbean-reflect:bundle:3.4 has a license which is categorized as valid",
    "[INFO]    ]VALID[   (compile) The artifact org.codehaus.plexus:plexus-classworlds:jar:2.2.2 has a license which is categorized as valid",
    "[INFO]    ]VALID[   (compile) The artifact org.codehaus.plexus:plexus-component-annotations:jar:1.5.1 has a license which is categorized as valid",
    "[INFO]    ]VALID[   (compile) The artifact org.codehaus.plexus:plexus-container-default:jar:1.5.1 has a license which is categorized as valid",
    "[INFO]    ]VALID[   (compile) The artifact org.codehaus.plexus:plexus-interpolation:jar:1.11 has a license which is categorized as valid",
    "[INFO]    ]VALID[   (compile) The artifact org.codehaus.plexus:plexus-utils:jar:2.0.1 has a license which is categorized as valid",
    "[INFO]    ]VALID[   (compile) The artifact org.sonatype.plexus:plexus-cipher:jar:1.4 has a license which is categorized as valid",
    "[INFO]    ]VALID[   (compile) The artifact org.sonatype.plexus:plexus-sec-dispatcher:jar:1.3 has a license which is categorized as valid",
    "[INFO] ------------------------------------------------------------------------",
    "[INFO] BUILD FAILURE",
    "[INFO] ------------------------------------------------------------------------",
    "[ERROR] Failed to execute goal com.soebes.maven.plugins.mlv:maven-license-verifier:",
};

Boolean[] checked = {
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
};

//
// Check if we find the following lines in the log file...
try {
        BufferedReader in = new BufferedReader(new FileReader(file));
        String str;
        while ((str = in.readLine()) != null) {
            for(int i=0; i<checkedLines.length; i++) {
                if (str.startsWith(checkedLines[i])) {
                    checked[i] = true;
                }
            }
        }
        in.close();
} catch (IOException e) {
    throw e;
}

// Check to see if every line has occured in the log file.
// if only one will not appear we will broke the integration test.
boolean result = true;
for(int i=0; i<checkedLines.length; i++) {
    if (checked[i] == false) {
        System.out.println("Unexpected content: " + checkedLines[i]);
        result = false;
    }
}

return result;
